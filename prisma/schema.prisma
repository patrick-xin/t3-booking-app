// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider      = "prisma-client-js"
    binaryTargets = "darwin-arm64"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Booking {
    id         String   @id @default(cuid())
    bookable   Bookable @relation(fields: [bookableId], references: [id])
    bookableId String
    date       DateTime @default(now())
    title      String
    session    String
    booker     User     @relation(fields: [userId], references: [id])
    userId     String
    notes      String?
    status     String   @default("pending")
}

model Bookable {
    id        String         @id @default(cuid())
    createdAt DateTime       @default(now())
    updatedAt DateTime       @updatedAt
    title     String
    notes     String
    sessions  Int[]
    days      Int[]
    Booking   Booking[]
    group     BookableGroup? @relation(fields: [groupId], references: [id])
    groupId   String?
}

model BookableGroup {
    id        String     @id @default(cuid())
    createdAt DateTime   @default(now())
    updatedAt DateTime   @updatedAt
    name      String     @unique
    bookable  Bookable[]
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    title         String
    notes         String
    booking       Booking[]
    role          Role      @default(USER)
    password      String    @default(dbgenerated("123456"))
}

enum Role {
    ADMIN
    USER
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
